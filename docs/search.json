[
  {
    "objectID": "RStudio_GitHub.html",
    "href": "RStudio_GitHub.html",
    "title": "RStudio & GitHub",
    "section": "",
    "text": "Hopefully you now have some idea about the purpose of git/github. Github is an online hosting service for git repositories. If you’ve never used git and GitHub before it is really quite intimidating. Let’s start with some practice!\n\nFirst, go to github.com and signup for a github account (if you haven’t already)\nOnce you have an account, read this introduction to github here\nFollow the steps to create your first repository, fork, and merge!\n\nOnce you’ve completed the above part. You should download git to your computer.\n\nSee the installing git page: https://gitforwindows.org/\nThere aren’t many things to select but go ahead and include the bash terminal if that’s an option.\nThere is a lot of info about installing and troubleshooting here: https://happygitwithr.com/install-git\n\n\nNow read through the introduce yourself to git chapter of happygitwithr.\n\nFor those that want to use the shell/terminal: Mac has a native shell/terminal/command line interpreter (usually called terminal in your launchpad area).  For windows folks, after you’ve installed git you’ll have access to the git bash terminal.  Access this by clicking on the start menu and typing in bash.  \n\nGreat, now try to work through chapters 9, 11, and 12."
  },
  {
    "objectID": "RStudio_GitHub.html#r-projects",
    "href": "RStudio_GitHub.html#r-projects",
    "title": "RStudio & GitHub",
    "section": "R Projects",
    "text": "R Projects\nFirst, it is important to know that we are going to be reading in some files locally. That is, from a folder somewhere on your computer (as opposed to reading a file in from the web). That means we need to be able to tell R where a file exists on our computer.\n\nLocating Files\nHow does R locate the file?\n\nWe can give a full path name to the file\n\nex: C:/Users/jbpost2/Documents/Repos/ST-558/datasets/\nex: C:\\\\\\\\Users\\\\\\\\jbpost2\\\\\\\\Documents\\\\\\\\Repos\\\\\\\\ST-558\\\\\\\\datasets\n\n\nNote: The \\ character is called an escape character. This allows us to use different symbols and things when we are working within a string of text. For instance, \\n is a line break. The \\ tells R to interpret the next character(s) in a different way than usual.\nFor example (cat is kind of like a different version of a print function):\n\ncat(\"Hi my names is Justin. I work at NC State.\")\n\nHi my names is Justin. I work at NC State.\n\n\nwith the \\n in there we get a line break:\n\ncat(\"Hi my names is Justin.\\nI work at NC State.\")\n\nHi my names is Justin.\nI work at NC State.\n\n\nTherefore, when we specify a path to a file as a string, if we try to use a \\ we actually need two \\\\ so that R knows we actually want a \\! Confusing I know. But, we can just replace \\ with / in paths to files to avoid that.\n\nFull path names are not good to use generally!\n\nIf you share your code with someone else, they don’t have the same folder structure, username, etc.\nInstead, use a relative path. That is, a path from R’s current working directory (the place it looks by default)\n\nDetermine R’s working directory via getwd() (get working directory)\n\n\ngetwd()\n\n[1] \"C:/Users/jbpost2/repos/eCOTS_2024\"\n\n\nNow if I had my file in the same folder as my working directory, I don’t need to use a full path as R is looking in that folder by default. If I had the file chickens.csv in my working directory, I could tell R where it is via something like:\n\nread.csv(\"chickens.csv\")\n\n\nGreat! How do we set that working directory? Via setwd() (set working directory)\n\n\nsetwd(\"C:/Users/jbpost2/Documents/Repos/ST-558/datasets/\")\n\n\nWe can also set it via menus:\n\n\n\n\n\n\n\nOk, but our goal is to share our code with others so they can run it. We could say to our collaborators, “just to update that one line of code to change your working directory and make sure to have all the files in the same directory that we use for this analysis.” Clearly, that isn’t an efficient way to work….\nInstead we can use R projects!\n\n\n\nUsing an R Project\n\nAs we often have many files associated with each analysis, it can make keeping analysis separate difficult. The project feature in RStudio is made to alleviate this!\n\nR projects provide a straightforward way to divide your work into multiple contexts. Each with their own:\n\nWorking directory\nWorkspace (environment with stored data/objects)\nHistory\nFolder structure & source documents\n\nThey are very easy to create!\n\n\n\n\n\n\nWhen you create an R project, you might note that it gets associated with a directory (or folder or repo). That folder is what the project uses as the working directory.\n\nThis is important! This means if we can share an entire folder (with subfolders and everything else in the same relative place), another user can pick up an R project and the paths to things should work! (Assuming we’ve used relative paths for everything.)\nThat’s exactly how we’ll use R projects with github! Github is a remote folder (that can have subfolders and what-not). If we associate an R project with that folder and upload that, another user can download it and open that R project, allowing them to work seamlessly!\n\nYou might create a new project for materials related to this course or for each homework assignment etc. It is up to you how much clarity you want on a specific folder/project you are working on.\nNote you can quickly switch between projects in the upper right hand of RStudio or via the File menu."
  },
  {
    "objectID": "RStudio_GitHub.html#connecting-gitgithub-with-rstudio",
    "href": "RStudio_GitHub.html#connecting-gitgithub-with-rstudio",
    "title": "RStudio & GitHub",
    "section": "Connecting Git/GitHub with RStudio",
    "text": "Connecting Git/GitHub with RStudio\nIdeally we want to document our process, easily collaborate, and widely share our work\n\nFor reproducibility, ideally we would save different versions of our analysis, write-up, etc. along the way\nRemember that git is a version control software to help:\n\nTrack the changes we commit to the files\nAllow multiple users to work on the same project\n\ngithub is a hosting service that allows us to do Git-based projects on the internet and share them widely!\n\nRecall our basic workflow. First we create a repo on github (remotely). We then associate a folder on our local computer with that repo using git. Then we:\n\nPull down most recent files (git pull) or do initial download (git clone)\nAdd files you want to keep changes to (git add)\nCommit to the changes (git commit)\nPush the changes to the remote repo (git push)\n\nLet’s go through some explicit steps to do this! Make sure you’ve downloaded git to your machine already (see earlier material on git/github)!\n\nCloning a Repo & Working in RStudio\nWe don’t want to use github.com web interface as that is inefficient.\n\nWe can clone the repo (i.e. download the entire repo locally).\nRepo main page has a green button. Click on that.\n\nCan download a zip and unzip it to an appropriate folder\n\n\n\n\n\n\n\n\nBetter to clone the repo via the URL and use RStudio! Open RStudio,\n\ngo to File –&gt; new project\nselect from version control\nchoose Git\npaste in the repo link\nselect a directory to save this repo in\nhit create project!\n\nNow have the files locally and this associates an R project with a git repo!\nTry it with my repo here: https://github.com/jbpost2/ZScores.git\n\nYou won’t have access to push files to this repository though!\n\n\nTry this out on your own! Create your own repo on github. Then try to download it as an R project.\n\n\nCommunication Between Github and RStudio\nWe need to make sure RStudio and github can communicate. This can sometimes be tough to get working! Do the following:\n\nModify a file in the github repo you just created and downloaded (the one you own).\nGo to the Git tab in your Environment area\nYou should see any files with changes\nCan add files that you’d like to commit up to the remote repo\nClick on all of the boxes (equivalent to git add -A when using the command line) and click the Commit button\nA window pops up with a comparison of files. When satisfied, write a commit message in the box and click the commit button (equivalent to git commit -m \"message\" when using the command line)\nHit close on that window\nClick the push button in the top right (equivalent to git push when using the command line)\nYou may be prompted to log-in in some way. If not, repo on gitub.com should show the changes!\n\n\n\nUsing the Command Line Interface (CLI)\nWhen working by myself on a repo, I’m not worried about merge conflicts with other people’s changes. As such, my workflow is as follows:\n\nOpen the appropriate project in RStudio\nGo to the Terminal and type git pull\nWork… at a good spot for saving, back to the terminal\nType git add -A to add all files that have been modified\nType git commit -m \"Message\" to stage a commit\nType git push to push the local changes to the remote repo\n\n\n\nCreating a Repo From an Existing R Project\nSometimes you’ll have an R project that already exists but you don’t have a corresponding repo on GitHub. The easiest way to get that project into a repo is to do the following:\n\nCreate a new repository on GitHub\nClone it to your computer via RStudio new project (in a different folder than your current project)\nMove all the files from the R Project you already have into the new project folder\nadd, commit, and push up the files\n\nPlease pop this video out and watch it in the full panopto player!\n\nCheck here for information about creating a web site with quarto and GitHub."
  },
  {
    "objectID": "Presentation.html#welcome",
    "href": "Presentation.html#welcome",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Welcome!",
    "text": "Welcome!\n\nGoals:\n\nDescribe reproducible workflows\nImplement a reproducible workflow with Git/GitHub and Quarto\n\nIdeally, use RStudio with git installed on the computer. Completely web-based alternatives discussed!"
  },
  {
    "objectID": "Presentation.html#get-to-know-each-other",
    "href": "Presentation.html#get-to-know-each-other",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Get to Know Each Other",
    "text": "Get to Know Each Other\nPlease head to this online poll:\n\nhttps://app.wooclap.com/PAOXSP\n\n\n\nIn the downtime, say hello to the people next to you!"
  },
  {
    "objectID": "Presentation.html#a-bit-about-me",
    "href": "Presentation.html#a-bit-about-me",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "A Bit About Me",
    "text": "A Bit About Me\n\n\nTeaching Professor in Department of Statistics at NC State (old picture of me when I was young)\nLove mixing computing and statistics"
  },
  {
    "objectID": "Presentation.html#a-bit-about-me-1",
    "href": "Presentation.html#a-bit-about-me-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "A Bit About Me",
    "text": "A Bit About Me\n\nMost importantly:\n\nTwo kids!"
  },
  {
    "objectID": "Presentation.html#cooking",
    "href": "Presentation.html#cooking",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Cooking",
    "text": "Cooking\nLouisa loves to ‘cook’"
  },
  {
    "objectID": "Presentation.html#delicious-meal",
    "href": "Presentation.html#delicious-meal",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Delicious Meal!",
    "text": "Delicious Meal!\n\nDelicious! She did it!"
  },
  {
    "objectID": "Presentation.html#delicious-meal-1",
    "href": "Presentation.html#delicious-meal-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Delicious Meal!",
    "text": "Delicious Meal!\n\nDelicious! She did it!\n\nWait… How did she do that?"
  },
  {
    "objectID": "Presentation.html#delicious-meal-2",
    "href": "Presentation.html#delicious-meal-2",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Delicious Meal!",
    "text": "Delicious Meal!\n\nDelicious! She did it!\n\nWait… How did she do that?\nOh no! Lack of reproducibility!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-gitgithub",
    "href": "Presentation.html#fatherly-advice-gitgithub",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Git/GitHub",
    "text": "Fatherly Advice: Git/GitHub\nIf she’d just used Git/GitHub to track her recipes, we wouldn’t be in this mess!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-gitgithub-1",
    "href": "Presentation.html#fatherly-advice-gitgithub-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Git/GitHub",
    "text": "Fatherly Advice: Git/GitHub\nIf she’d just used Git/GitHub to track her recipes, we wouldn’t be in this mess!\n\n\nGit: keeps all recipe versions without this –&gt;"
  },
  {
    "objectID": "Presentation.html#git-version-control-software",
    "href": "Presentation.html#git-version-control-software",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Git: Version Control Software",
    "text": "Git: Version Control Software\n\nYou associate git with a folder (repo)\n\nGit keeps track of all files in the folder (repo)\nIf you want to keep changes you’ve made, you commit the changes"
  },
  {
    "objectID": "Presentation.html#git-github",
    "href": "Presentation.html#git-github",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\nGit is a version control software\nGithub is an online hosting service for Git-based projects\n\nVery useful for collaborating and sharing work!"
  },
  {
    "objectID": "Presentation.html#mixing-cuisines",
    "href": "Presentation.html#mixing-cuisines",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Mixing Cuisines!",
    "text": "Mixing Cuisines!\nIssue: Louisa keeps getting her Chinese food recipes mixed up with her Italian recipes!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-r-projects",
    "href": "Presentation.html#fatherly-advice-r-projects",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: R Projects",
    "text": "Fatherly Advice: R Projects\nIf only she’d use R projects!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-r-projects-1",
    "href": "Presentation.html#fatherly-advice-r-projects-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: R Projects",
    "text": "Fatherly Advice: R Projects\nIf only she’d use R projects!\n\n\nBasically a file that gets associated with a folder (repo)\nMaintains a working directory, history, environment, etc.\nEasy to switch between projects!"
  },
  {
    "objectID": "Presentation.html#r-projects",
    "href": "Presentation.html#r-projects",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "R Projects",
    "text": "R Projects\nR projects provide a straightforward way to divide your work into multiple contexts. Each with their own:\n\nWorking directory\nWorkspace (environment with stored data/objects)\nHistory\nFolder structure & source documents\n\n\nCan be used outside of git/github\nSpyder IDE for python has similar functionality"
  },
  {
    "objectID": "Presentation.html#including-thoughtscomments",
    "href": "Presentation.html#including-thoughtscomments",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Including Thoughts/Comments",
    "text": "Including Thoughts/Comments\nLousia has trouble remembering what she was thinking when trying her recipes!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-quarto",
    "href": "Presentation.html#fatherly-advice-quarto",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Quarto",
    "text": "Fatherly Advice: Quarto\nIf only she’d use Quarto (or, alternatively, Jupyter) Notebooks!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-quarto-1",
    "href": "Presentation.html#fatherly-advice-quarto-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Quarto",
    "text": "Fatherly Advice: Quarto\nIf only she’d use Quarto (or, alternatively, Jupyter) Notebooks!\n\n\nGive us a way to include thoughts and comments with nice formatting\nCan output to HTML, PDF, Word, Power Point, …\nCode can be included and output automatically embedded!"
  },
  {
    "objectID": "Presentation.html#quarto",
    "href": "Presentation.html#quarto",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Quarto",
    "text": "Quarto\nDesigned to be used in three ways (R for Data Science)\n\nCommunicating to decision makers (focus on conclusions not code)\nCollaborating with other data scientists (including future you!)\nAs environment to do data science (documents what you did and what you were thinking)"
  },
  {
    "objectID": "Presentation.html#sharing-recipes",
    "href": "Presentation.html#sharing-recipes",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Sharing Recipes",
    "text": "Sharing Recipes\nLouisa wants to share her delicious recipes with her friends!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-use-quarto-github",
    "href": "Presentation.html#fatherly-advice-use-quarto-github",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Use Quarto & Github",
    "text": "Fatherly Advice: Use Quarto & Github\nIf only she’d use Quarto with GitHub!"
  },
  {
    "objectID": "Presentation.html#fatherly-advice-use-quarto-github-1",
    "href": "Presentation.html#fatherly-advice-use-quarto-github-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Fatherly Advice: Use Quarto & Github",
    "text": "Fatherly Advice: Use Quarto & Github\nIf only she’d use Quarto with GitHub!\n\nEasy way to collaborate and share results\nCan simply store code on git/github or include output from quarto\nQuarto can easily(-ish) create a webpage on github!"
  },
  {
    "objectID": "Presentation.html#list-of-tools",
    "href": "Presentation.html#list-of-tools",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "List of Tools",
    "text": "List of Tools\n\nGit: Version control software\nGitHub: Online platform for using git/collaborating\nR Project: Keep analysis in its own context\nQuarto: Integrate text and code to create useful output docs"
  },
  {
    "objectID": "Presentation.html#list-of-tools-1",
    "href": "Presentation.html#list-of-tools-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "List of Tools",
    "text": "List of Tools\n\nGit: Version control software\nGitHub: Online platform for using git/collaborating\nR Project: Keep analysis in its own context\nQuarto: Integrate text and code to create useful output docs\nGoogle Colab - web based way to program in python and R\n\nCan use with github\nSome functionality similar to quarto"
  },
  {
    "objectID": "Presentation.html#data-science-workflow",
    "href": "Presentation.html#data-science-workflow",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Data Science Workflow",
    "text": "Data Science Workflow\nUsually\n\nRead in raw data and manipulate it\nCombine data sources\nSummarize data to glean insights\nApply common analysis methods\nCommunicate Effectively\n\n\nWant to document this process and make it reproducible, collaborative, and easily shared!"
  },
  {
    "objectID": "Presentation.html#practice",
    "href": "Presentation.html#practice",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Practice!",
    "text": "Practice!\n\nSign up for github account\nCreate a repo\nMake some changes! Check version control"
  },
  {
    "objectID": "Presentation.html#practice-1",
    "href": "Presentation.html#practice-1",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Practice!",
    "text": "Practice!\n\nSign up for github account\nCreate a repo\nMake some changes! Check version control\nhttps://app.wooclap.com/PAOXSP"
  },
  {
    "objectID": "Presentation.html#recap",
    "href": "Presentation.html#recap",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Recap",
    "text": "Recap\nReproducibility means:\n\nEntire analysis can be redone from start to finish\n\nGit enables us to do version control\nGitHub enables us to collaborate and share\n\nCode should be documented with thought process\n\nQuarto or Jupyter Notebooks allow for interweaving of text and code\n\nR projects are great for separating analyses"
  },
  {
    "objectID": "Presentation.html#questionscontact",
    "href": "Presentation.html#questionscontact",
    "title": "Teaching Reproducible Workflows Using Digital Notebooks",
    "section": "Questions/Contact",
    "text": "Questions/Contact\n\njustin_post@ncsu.edu\nSpecial thanks to Louisa"
  },
  {
    "objectID": "Creating_Web_Site.html",
    "href": "Creating_Web_Site.html",
    "title": "Creating a Web Page with Quarto",
    "section": "",
    "text": "We’re going to follow the process outlined for ‘render to docs’ from here.\n\nStep 1\n\nHead to github and create a new repo.\n\nBe sure to make the repo public and do not choose a .gitignore\n\n\n\n\n\n\n\n\n\nStep 2\n\nCreate a new R project from version control that clones this repository locally.\n\nRecall you can click on the green button on the github.com repo website to copy the repo link.\nA .gitignore file may be created in this process. That isn’t a worry!\n\n\n\n\nStep 3\n\nCreate a new .qmd document that outputs to HTML. You can give this whatever title you’d like. Save the file in the main repo folder.\n\n\n\nStep 4\nIn your repo folder (locally), create a file called _quarto.yml. Open this file (perhaps in RStudio or a text editor) and place the following in the file (spacing is important!):\nproject:\n  type: website\n  output-dir: docs\nTo create the file, you can just navigate to the folder and create a new file.\n\nOn windows, first make sure that file extensions show when you look at files in folders.\n::: {.cell} ::: {.cell-output-display}  ::: :::\n\nNow right click in the folder area, select ‘New’ –&gt; ‘Text Document’. Change the file name and file extension (the .txt part) to _quarto.yml. Now you can open the file in RStudio or a text editor and add the text.\n\nOn a mac, you should be able to create a file using TextEdit in your R project folder. Save it as a .doc or whatever. Then you should be able to rename the file as _quarto.yml. Now you can open the file in RStudio or a text editor and add the text.\n\n\n\nStep 5\nNow create a file called .nojekyll in your project repo. This file doesn’t need to have anything in it! You just need that file there (it may be a hidden file after you create it. Github should still track it.)\n\n\nStep 6\nOpen the terminal in RStudio (next to the Console) and run the following code:\nquarto render\n\n\n\n\n\n\n\nStep 7\nPush all changes up to your repo! You can do this via menus or the command line (or via the github web interface).\n\n\nStep 8\nHead to your github repo page. Go to settings, choose pages, and under “Branch” choose ‘main’ and change the folder to /docs. Then hit save!\n\n\n\n\n\n\n\nStep 9\nWait about 2 minutes… Head back to your main github repo page. You’ll now see a ‘Deployments’ section on the bottom right.\n\n\n\n\n\nClick on that. Hopefully, after a minute you see a green check and something that says your site is ready!\n\n\n\n\n\nClick on that and you should see a nicely rendered website!"
  },
  {
    "objectID": "Colab_GitHub.html",
    "href": "Colab_GitHub.html",
    "title": "Google Colab with Github",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Colab_GitHub.html#quarto",
    "href": "Colab_GitHub.html#quarto",
    "title": "Google Colab with Github",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Colab_GitHub.html#running-code",
    "href": "Colab_GitHub.html#running-code",
    "title": "Google Colab with Github",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "",
    "section": "",
    "text": "4\n\n4"
  },
  {
    "objectID": "Reproducibility.html",
    "href": "Reproducibility.html",
    "title": "Reproducibility with Github & RStudio or Google Colab",
    "section": "",
    "text": "Statistics & Data Science!\n\nRead in raw data and manipulate it\nCombine data sources\nSummarize data to glean insights\nApply common analysis methods\nCommunicate Effectively\n\nImportant considerations for our data analysis workflow:\n\nReproducibility: Recreate analysis completely\nVersion control: Avoid renaming of files or losing old work\nCollaboration: Work seamlessly with others"
  },
  {
    "objectID": "Reproducibility.html#forking",
    "href": "Reproducibility.html#forking",
    "title": "Reproducibility with Github & RStudio or Google Colab",
    "section": "Forking",
    "text": "Forking\n\nPeople often fork the repo\nThis creates a copy of the repo on your account\nYou can then work as normal\nIf you do a commit on your branch, you may notice something like this"
  },
  {
    "objectID": "Reproducibility.html#merging-branches",
    "href": "Reproducibility.html#merging-branches",
    "title": "Reproducibility with Github & RStudio or Google Colab",
    "section": "Merging Branches",
    "text": "Merging Branches\nSuppose you like your commit and you think the original owner will too!\n\nYou can do a pull request\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are lucky, there won’t be any merge conflicts.\n\nAllows the owner of the original repo to accept the pull request without needing to modify things\nThe owner will get a notification that a pull request has been made\n\n\n\n\n\n\n\n\n\n\n\nOwner can then investigate the request and choose whether or not to accept it or they can ask for more details"
  },
  {
    "objectID": "Reproducibility.html#dealing-with-conflicts",
    "href": "Reproducibility.html#dealing-with-conflicts",
    "title": "Reproducibility with Github & RStudio or Google Colab",
    "section": "Dealing with conflicts",
    "text": "Dealing with conflicts\n\nSometimes changes requested conflict with changes already made\n\n\n\n\n\n\n\n\n\n\n\nOwner sees a notification about conflicts that must be resolved\n\n\n\n\n\n\n\n\n\n\n\nThey can view the issues and pick which to include or to include both with a modification\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; is a conflict marker\n\n\n\n\n\n\n\n\n\n\nFigure out what to do and delete the &lt;&lt;&lt; === &gt;&gt;&gt; lines"
  }
]